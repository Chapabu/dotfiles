[user]
  name=Matt Chapman

[alias]
  cp = cherry-pick
  st = status -s
  cl = clone
  ci = commit
  co = checkout
  br = branch
  diff = diff --word-diff
  dc = diff --cached
  fp = format-patch
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  la = "!git config -l | grep alias | cut -c 7-"
  bra = branch -vva
  fap = fetch --all --prune
  compare = log --left-right --graph --cherry-pick --oneline
  current = rev-parse --abbrev-ref HEAD
  pb = "!f() { CURRENT=$(git current); git checkout $1 && git pull && git checkout ${CURRENT}; }; f"
  pd = "!git pb develop"
  brd = "!f() { BRANCH=$1;git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative master..${BRANCH}; }; f"
  ds = diff --staged
  db = "!f() { BRANCH=$1;git log $(git merge-base --octopus $(git log -1 --merges --pretty=format:%P)).. --boundary --oneline ${BRANCH}; }; f"
	gone = ! git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}' | xargs -r git branch -D

[core]
  excludesfile = /home/mattc/dotfiles/.gitignore_global
  editor = nvim
  autocrlf = input

[commit]
  gpgsign = true

[gpg]
  program = gpg

[push]
  default = simple

[rerere]
  enabled = true

[pager]
  diff = diff-so-fancy | less --tabs=1,5 -RFX
  show = diff-so-fancy | less --tabs=1,5 -RFX

[color]
  ui = true

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse

[include]
  path = dotfiles/.gitconfig_private

[includeIf "gitdir:~/Workspace/work/"]
  path = dotfiles/.gitconfig_work

[includeIf "gitdir:/app/"]
  path = dotfiles/.gitconfig_work

[cola]
	spellcheck = false
[pull]
	rebase = false
[init]
	defaultBranch = main
